{
	"info": {
		"_postman_id": "d57621c4-adbf-4179-8f9a-08b705c45781",
		"name": "SBE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22635297"
	},
	"item": [
		{
			"name": "Market Data Endpoints",
			"item": [
				{
					"name": "Test Connectivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let buffer = new ArrayBuffer(pm.response.stream.length)",
									"let temp_buffer = new Uint8Array(buffer)",
									"temp_buffer.forEach((element,index)=> temp_buffer[index]=pm.response.stream[index])",
									"",
									"let blockLength = new DataView(buffer).getUint16(0,true)",
									"let templateId = new DataView(buffer).getUint16(2,true);",
									"let schemaId = new DataView(buffer).getUint16(4,true);",
									"let version = new DataView(buffer).getUint16(6,true);",
									"",
									"",
									"let result = {",
									"    \"blockLength\": blockLength,",
									"    \"templateId\": templateId,",
									"    \"schemaId\": schemaId,",
									"    \"version\": version,",
									"    ",
									"}",
									"",
									"let hexString = arrayBufferToHexString(buffer);",
									"let display = {",
									"    \"hexString\": hexString,",
									"    \"detail\": JSON.stringify(result)",
									"}",
									"console.log(display)",
									"// pm.visualizer.set(display)",
									"let template = \"<html><body>hex: {{response.hexString}}</br>{{response.detail}}</body></html>\"",
									"pm.visualizer.set(template,{response: display})",
									"",
									"",
									"",
									"function arrayBufferToHexString(buffer) {",
									"  const byteArray = new Uint8Array(buffer);",
									"  const hexString = [];",
									"  for (let i = 0; i < byteArray.byteLength; i++) {",
									"    hexString.push(byteArray[i].toString(16));",
									"  }",
									"  return hexString.join('');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/sbe",
								"type": "text"
							},
							{
								"key": "X-MBX-SBE",
								"value": "1:0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v3/ping",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Server Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let buffer = new ArrayBuffer(pm.response.stream.length)",
									"let temp_buffer = new Uint8Array(buffer)",
									"temp_buffer.forEach((element,index)=> temp_buffer[index]=pm.response.stream[index])",
									"",
									"let blockLength = new DataView(buffer).getUint16(0,true)",
									"let templateId = new DataView(buffer).getUint16(2,true);",
									"let schemaId = new DataView(buffer).getUint16(4,true);",
									"let version = new DataView(buffer).getUint16(6,true);",
									"let timestamp = parseInt(new DataView(buffer).getBigUint64(8,true));",
									"",
									"console.log(timestamp)",
									"let result = {",
									"    \"blockLength\": blockLength,",
									"    \"templateId\": templateId,",
									"    \"schemaId\": schemaId,",
									"    \"version\": version,",
									"    \"timestamp\": timestamp",
									"}",
									"",
									"let hexString = arrayBufferToHexString(buffer);",
									"let display = {",
									"    \"hexString\": hexString,",
									"    \"detail\": JSON.stringify(result)",
									"}",
									"console.log(display)",
									"// pm.visualizer.set(display)",
									"let template = \"<html><body>hex: {{response.hexString}}</br>{{response.detail}}</body></html>\"",
									"pm.visualizer.set(template,{response: display})",
									"",
									"",
									"",
									"function arrayBufferToHexString(buffer) {",
									"  const byteArray = new Uint8Array(buffer);",
									"  const hexString = [];",
									"  for (let i = 0; i < byteArray.byteLength; i++) {",
									"    hexString.push(byteArray[i].toString(16));",
									"  }",
									"  return hexString.join('');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/sbe",
								"type": "text"
							},
							{
								"key": "X-MBX-SBE",
								"value": "1:0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v3/time",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"time"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exchange Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let buffer = new ArrayBuffer(pm.response.stream.length)",
									"let temp_buffer = new Uint8Array(buffer)",
									"temp_buffer.forEach((element,index)=> temp_buffer[index]=pm.response.stream[index])",
									"",
									"",
									"let pointTo = 0;",
									"",
									"let blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"pointTo += 2;",
									"let templateId = new DataView(buffer).getUint16(pointTo,true);",
									"pointTo += 2;",
									"let schemaId = new DataView(buffer).getUint16(pointTo,true);",
									"pointTo += 2;",
									"let version = new DataView(buffer).getUint16(pointTo,true);",
									"pointTo += 2;",
									"",
									"let result = {",
									"    \"blockLength\": blockLength,",
									"    \"templateId\": templateId,",
									"    \"schemaId\": schemaId,",
									"    \"version\": version,",
									"}",
									"",
									"if(templateId === 103){",
									"    let group_rateLimits_blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"    pointTo += 2;",
									"    let group_rateLimits_numInGroup = new DataView(buffer).getUint32(pointTo,true);",
									"    pointTo += 4;",
									"",
									"    result['group_rateLimits_blockLength'] = group_rateLimits_blockLength;",
									"    result['group_rateLimits_numInGroup'] = group_rateLimits_numInGroup;",
									"",
									"    let rateLimits = [];",
									"    for(let i=0;i<group_rateLimits_numInGroup;i++){",
									"        let rateLimit_obj = {};",
									"        let rateLimitType = {0:'RAW_REQUESTS',2:'REQUEST_WEIGHT',3:'ORDERS'}[new DataView(buffer).getUint8(pointTo,true)];",
									"        pointTo += 1;",
									"        let interval = {0:'Second',1:'Minute',2:'Hour',3:'Day'}[new DataView(buffer).getUint8(pointTo,true)];",
									"        pointTo += 1;",
									"        let intervalNum = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"        let rateLimit = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"        pointTo += 8;",
									"",
									"        rateLimit_obj = {",
									"            \"rateLimitType\": rateLimitType,",
									"            \"interval\": interval,",
									"            \"intervalNum\": intervalNum,",
									"            \"rateLimit\": rateLimit",
									"        }",
									"        rateLimits.push(rateLimit_obj)",
									"    }",
									"",
									"    result['rateLimits'] = rateLimits",
									"",
									"    let group_exchangeFilters_blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"    pointTo += 2;",
									"    let group_exchangeFilters_numInGroup = new DataView(buffer).getUint32(pointTo,true);",
									"    pointTo += 4;",
									"",
									"    result['group_exchangeFilters_blockLength'] = group_exchangeFilters_blockLength;",
									"    result['group_exchangeFilters_numInGroup'] = group_exchangeFilters_numInGroup;",
									"",
									"    let exchangeFilters = [];",
									"    for(let i=0;i<group_exchangeFilters_numInGroup;i++){",
									"        let exchangeFilter_obj = {};",
									"        let exchangeFilter_length = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"",
									"        let exchangeFilter_header_blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"        pointTo += 2;",
									"        let exchangeFilter_header_templateId = new DataView(buffer).getUint16(pointTo,true);",
									"        pointTo += 2;",
									"        let exchangeFilter_header_schemaId = new DataView(buffer).getUint16(pointTo,true);",
									"        pointTo += 2;",
									"        let exchangeFilter_header_version = new DataView(buffer).getUint16(pointTo,true);",
									"        pointTo += 2;",
									"",
									"        exchangeFilter_obj = {",
									"            \"exchangeFilter_length\": exchangeFilter_length,",
									"            \"exchangeFilter_header_blockLength\": exchangeFilter_header_blockLength,",
									"            \"exchangeFilter_header_templateId\": exchangeFilter_header_templateId,",
									"            \"exchangeFilter_header_schemaId\": exchangeFilter_header_schemaId,",
									"            \"exchangeFilter_header_version\": exchangeFilter_header_version,",
									"        }",
									"",
									"        switch(exchangeFilter_header_templateId){",
									"            case 15: {",
									"                exchangeFilter_obj[\"exchangeFilters_filterType\"] = \"ExchangeMaxNumOrders\";",
									"                let exchangeFilter_maxNumOrders = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                pointTo += 8;",
									"                ",
									"                symbol_filter_obj['exchangeFilter_maxNumOrders'] = exchangeFilter_maxNumOrders;",
									"                break;",
									"            }",
									"",
									"            case 16: {",
									"                exchangeFilter_obj[\"exchangeFilters_filterType\"] = \"ExchangeMaxNumAlgoOrders\";",
									"                let exchangeFilter_maxNumAlgoOrders = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                pointTo += 8;",
									"                ",
									"                symbol_filter_obj['exchangeFilter_maxNumAlgoOrders'] = exchangeFilter_maxNumAlgoOrders;",
									"                break;",
									"            }",
									"",
									"            case 17: {",
									"                exchangeFilter_obj[\"exchangeFilters_filterType\"] = \"ExchangeMaxNumIcebergOrders\";",
									"                let exchangeFilter_maxNumIcebergOrders = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                pointTo += 8;",
									"                ",
									"                symbol_filter_obj['exchangeFilter_maxNumIcebergOrders'] = exchangeFilter_maxNumIcebergOrders;",
									"                break;",
									"            }",
									"        }",
									"",
									"        exchangeFilters.push(exchangeFilter_obj);",
									"    }",
									"    result['exchangeFilters'] = exchangeFilters;",
									"",
									"",
									"    let group_symbols_blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"    pointTo += 2;",
									"    let group_symbols_numInGroup = new DataView(buffer).getUint32(pointTo,true);",
									"    pointTo += 4;",
									"",
									"    result['group_symbols_blockLength'] = group_symbols_blockLength;",
									"    result['group_symbols_numInGroup'] = group_symbols_numInGroup;",
									"",
									"    let symbols = [];",
									"    for(let i=0;i<group_symbols_numInGroup;i++){",
									"        let symbol_obj = {};",
									"        let status = {0:\"PRE_TRADING\",1:'TRADING',2:'POST_TRADING',3:'END_OF_DAY',4:'HALT',5:'AUCTION_MATCH',7:'BREAK'}[new DataView(buffer).getUint8(pointTo,true)];",
									"        pointTo += 1;",
									"        let baseAssetPrecision = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"        let quoteAssetPrecision = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"        let baseCommissionPrecision = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"        let quoteCommissionPrecision = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"        ",
									"        let orderTypes = [];",
									"        {",
									"            let orderTypes_array = ['MARKET','LIMIT','STOP_LOSS','STOP_LOSS_LIMIT','TAKE_PROFIT','TAKE_PROFIT_LIMIT','LIMIT_MAKER'];",
									"            let orderTypes_byte = new DataView(buffer).getUint16(pointTo,true);",
									"            pointTo += 2;",
									"            for(let i=0;orderTypes_byte>0;i++){",
									"                if(orderTypes_byte%2){",
									"                    ",
									"                    orderTypes.push(orderTypes_array[i]);",
									"                }",
									"                orderTypes_byte = orderTypes_byte >>> 1;",
									"            }",
									"        }",
									"        ",
									"",
									"        let icebergAllowed = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"        pointTo += 1;",
									"        let ocoAllowed = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"        pointTo += 1;",
									"        let quoteOrderQtyMarketAllowed = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"        pointTo += 1;",
									"        let allowTrailingStop = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"        pointTo += 1;",
									"        let cancelReplaceAllowed = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"        pointTo += 1;",
									"        let isSpotTradingAllowed = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"        pointTo += 1;",
									"        let isMarginTradingAllowed = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"        pointTo += 1;",
									"",
									"        let defaultSelfTradePreventionMode = {1:'NONE',2:'EXPIRE_TAKER',3:'EXPIRE_MAKER',4:'EXPIRE_BOTH'}[new DataView(buffer).getUint8(pointTo,true)]",
									"        pointTo += 1;",
									"",
									"",
									"        let allowedSelfTradePreventionModes = [];",
									"        {",
									"            let allowedSelfTradePreventionModes_array = ['NONE','EXPIRE_TAKER','EXPIRE_MAKER','EXPIRE_BOTH'];",
									"            let allowedSelfTradePreventionModes_byte = new DataView(buffer).getUint8(pointTo,true);",
									"            pointTo += 1;",
									"            for(let i=0;allowedSelfTradePreventionModes_byte>0;i++){",
									"                if(allowedSelfTradePreventionModes_byte%2){",
									"                    allowedSelfTradePreventionModes.push(allowedSelfTradePreventionModes_array[i]);",
									"                }",
									"                allowedSelfTradePreventionModes_byte = allowedSelfTradePreventionModes_byte >>> 1;",
									"            }",
									"        }",
									"        ",
									"        symbol_obj = {",
									"            \"status\": status,",
									"            \"baseAssetPrecision\": baseAssetPrecision,",
									"            \"quoteAssetPrecision\": quoteAssetPrecision,",
									"            \"baseCommissionPrecision\": baseCommissionPrecision,",
									"            \"quoteCommissionPrecision\": quoteCommissionPrecision,",
									"            \"orderTypes\": orderTypes,",
									"            \"icebergAllowed\": icebergAllowed,",
									"            \"ocoAllowed\": ocoAllowed,",
									"            \"quoteOrderQtyMarketAllowed\": quoteOrderQtyMarketAllowed,",
									"            \"allowTrailingStop\": allowTrailingStop,",
									"            \"cancelReplaceAllowed\": cancelReplaceAllowed,",
									"            \"isSpotTradingAllowed\": isSpotTradingAllowed,",
									"            \"isMarginTradingAllowed\": isMarginTradingAllowed,",
									"            \"defaultSelfTradePreventionMode\": defaultSelfTradePreventionMode,",
									"            \"allowedSelfTradePreventionModes\": allowedSelfTradePreventionModes",
									"        }",
									"",
									"",
									"        let group_symbol_filters_blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"        pointTo += 2;",
									"        let group_symbol_filters_numInGroup = new DataView(buffer).getUint32(pointTo,true);",
									"        pointTo += 4;",
									"",
									"",
									"        symbol_obj['group_symbol_filters_blockLength'] = group_symbol_filters_blockLength;",
									"        symbol_obj['group_symbol_filters_numInGroup'] = group_symbol_filters_numInGroup;",
									"        ",
									"        ",
									"        let symbol_filters = []",
									"        for(let j=0;j<group_symbol_filters_numInGroup;j++){",
									"            let symbol_filter_obj = {};",
									"",
									"            let symbol_filter_data_length = new DataView(buffer).getUint8(pointTo,true);",
									"            pointTo += 1;",
									"",
									"            let symbol_filter_header_blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"            pointTo += 2;",
									"            let symbol_filter_header_templateId = new DataView(buffer).getUint16(pointTo,true);",
									"            pointTo += 2;",
									"            let symbol_filter_header_schemaId = new DataView(buffer).getUint16(pointTo,true);",
									"            pointTo += 2;",
									"            let symbol_filter_header_version = new DataView(buffer).getUint16(pointTo,true);",
									"            pointTo += 2;",
									"",
									"            symbol_filter_obj = {",
									"                \"symbol_filter_data_length\": symbol_filter_data_length,",
									"                \"symbol_filter_header_blockLength\": symbol_filter_header_blockLength,",
									"                \"symbol_filter_header_templateId\": symbol_filter_header_templateId,",
									"                \"symbol_filter_header_schemaId\": symbol_filter_header_schemaId,",
									"                \"symbol_filter_header_version\": symbol_filter_header_version",
									"            }",
									"",
									"            switch(symbol_filter_header_templateId){",
									"                case 1: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"PriceFilter\";",
									"                    let symbol_filter_priceExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_minPrice = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_priceExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_maxPrice = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_priceExponent);",
									"                    pointTo +=8;",
									"                    let symbol_filter_tickSize = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_priceExponent);",
									"                    pointTo +=8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_priceExponent'] = symbol_filter_priceExponent;",
									"                    symbol_filter_obj['symbol_filter_minPrice'] = symbol_filter_minPrice;",
									"                    symbol_filter_obj['symbol_filter_maxPrice'] = symbol_filter_maxPrice;",
									"                    symbol_filter_obj['symbol_filter_tickSize'] = symbol_filter_tickSize;",
									"                    break;",
									"                }",
									"                    ",
									"                ",
									"                ",
									"                case 2: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"PercentPriceFilter\";",
									"                    let symbol_filter_multiplierExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_multiplierUp = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_multiplierExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_multiplierDown = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_multiplierExponent);",
									"                    pointTo +=8;",
									"                    let symbol_filter_avgPriceMins = new DataView(buffer).getInt32(pointTo,true);",
									"                    pointTo +=4;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_multiplierExponent'] = symbol_filter_multiplierExponent;",
									"                    symbol_filter_obj['symbol_filter_multiplierUp'] = symbol_filter_multiplierUp;",
									"                    symbol_filter_obj['symbol_filter_multiplierDown'] = symbol_filter_multiplierDown;",
									"                    symbol_filter_obj['symbol_filter_avgPriceMins'] = symbol_filter_avgPriceMins;",
									"                    break;",
									"                }",
									"                    ",
									"",
									"                case 3: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"PercentPriceBySide\";",
									"                    let symbol_filter_multiplierExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_bidMultiplierUp = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_multiplierExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_bidMultiplierDown = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    let symbol_filter_askMultiplierUp = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_multiplierExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_askMultiplierDown = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_multiplierExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_avgPriceMins = new DataView(buffer).getInt32(pointTo,true);",
									"                    pointTo += 4;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_multiplierExponent'] = symbol_filter_multiplierExponent;",
									"                    symbol_filter_obj['symbol_filter_bidMultiplierUp'] = symbol_filter_bidMultiplierUp;",
									"                    symbol_filter_obj['symbol_filter_bidMultiplierDown'] = symbol_filter_bidMultiplierDown;",
									"                    symbol_filter_obj['symbol_filter_askMultiplierUp'] = symbol_filter_askMultiplierUp;",
									"                    symbol_filter_obj['symbol_filter_askMultiplierDown'] = symbol_filter_askMultiplierDown;",
									"                    symbol_filter_obj['symbol_filter_avgPriceMins'] = symbol_filter_avgPriceMins;",
									"                    break;",
									"                }",
									"                    ",
									"",
									"                case 4: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"LotSize\";",
									"                    let symbol_filter_qtyExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_minQty = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_qtyExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_maxQty = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_qtyExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_stepSize = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_qtyExponent);",
									"                    pointTo += 8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_qtyExponent'] = symbol_filter_qtyExponent;",
									"                    symbol_filter_obj['symbol_filter_minQty'] = symbol_filter_minQty;",
									"                    symbol_filter_obj['symbol_filter_maxQty'] = symbol_filter_maxQty;",
									"                    symbol_filter_obj['symbol_filter_stepSize'] = symbol_filter_stepSize;",
									"                    break;",
									"                }",
									"                   ",
									"",
									"                case 5: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"MinNotional\";",
									"                    let symbol_filter_priceExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_minNotional = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_priceExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_applyToMarket = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"                    pointTo += 1;",
									"                    let symbol_filter_avgPriceMins = new DataView(buffer).getInt32(pointTo,true);",
									"                    pointTo += 4;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_priceExponent'] = symbol_filter_priceExponent;",
									"                    symbol_filter_obj['symbol_filter_minNotional'] = symbol_filter_minNotional;",
									"                    symbol_filter_obj['symbol_filter_applyToMarket'] = symbol_filter_applyToMarket;",
									"                    symbol_filter_obj['symbol_filter_avgPriceMins'] = symbol_filter_avgPriceMins;",
									"                    break;",
									"                }",
									"",
									"                case 6: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"Notional\";",
									"                    let symbol_filter_priceExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_minNotional = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_priceExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_applyMinToMarket = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"                    pointTo += 1;",
									"                    let symbol_filter_maxNotional = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_priceExponent);",
									"                    pointTo += 8;",
									"                     let symbol_filter_applyMaxToMarket = new DataView(buffer).getUint8(pointTo,true)?true:false;",
									"                    pointTo += 1;",
									"                    let symbol_filter_avgPriceMins = new DataView(buffer).getInt32(pointTo,true);",
									"                    pointTo += 4;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_priceExponent'] = symbol_filter_priceExponent;",
									"                    symbol_filter_obj['symbol_filter_minNotional'] = symbol_filter_minNotional;",
									"                    symbol_filter_obj['symbol_filter_applyMinToMarket'] = symbol_filter_applyMinToMarket;",
									"                    symbol_filter_obj['symbol_filter_maxNotional'] = symbol_filter_maxNotional;",
									"                    symbol_filter_obj['symbol_filter_applyMaxToMarket'] = symbol_filter_applyMaxToMarket;",
									"                    symbol_filter_obj['symbol_filter_avgPriceMins'] = symbol_filter_avgPriceMins;",
									"                    break;",
									"                }",
									"",
									"                case 7: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"IcebergParts\";",
									"                    let symbol_filter_filterLimit = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_filterLimit'] = symbol_filter_filterLimit;",
									"                    ",
									"                    break;",
									"                }",
									"",
									"                case 8: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"MarketLotSize\";",
									"                    let symbol_filter_qtyExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_minQty = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_qtyExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_maxQty = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_qtyExponent);",
									"                    pointTo += 8;",
									"                    let symbol_filter_stepSize = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_qtyExponent);",
									"                    pointTo += 8;",
									"                    ",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_qtyExponent'] = symbol_filter_qtyExponent;",
									"                    symbol_filter_obj['symbol_filter_minQty'] = symbol_filter_minQty;",
									"                    symbol_filter_obj['symbol_filter_maxQty'] = symbol_filter_maxQty;",
									"                    symbol_filter_obj['symbol_filter_stepSize'] = symbol_filter_stepSize;",
									"",
									"                    break;",
									"                }",
									"",
									"                case 9: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"MaxNumOrders\";",
									"",
									"                    let symbol_filter_maxNumOrders = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    ",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_maxNumOrders'] = symbol_filter_maxNumOrders;",
									"                    ",
									"                    break;",
									"                }",
									"",
									"                case 10: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"MaxNumAlgoOrders\";",
									"                    ",
									"                    let symbol_filter_maxNumAlgoOrders = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_maxNumAlgoOrders'] = symbol_filter_maxNumAlgoOrders;",
									"                    ",
									"                    break;",
									"                }",
									"",
									"                case 11: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"MaxNumIcebergOrders\";",
									"                    ",
									"                    let symbol_filter_maxNumIcebergOrders = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_maxNumIcebergOrders'] = symbol_filter_maxNumIcebergOrders;",
									"                    ",
									"                    break;",
									"                }",
									"",
									"                case 12: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"MaxPosition\";",
									"                    ",
									"                    let symbol_filter_qtyExponent = new DataView(buffer).getInt8(pointTo,true);",
									"                    pointTo += 1;",
									"                    let symbol_filter_maxPosition = MantissaToString(parseInt(new DataView(buffer).getBigInt64(pointTo,true)),symbol_filter_qtyExponent);",
									"                    pointTo += 8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_qtyExponent'] = symbol_filter_qtyExponent;",
									"                    symbol_filter_obj['symbol_filter_maxPosition'] = symbol_filter_maxPosition;",
									"",
									"                    break;",
									"                }",
									"",
									"                case 13: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"TrailingDelta\";",
									"                    ",
									"                    let symbol_filter_minTrailingAboveDelta = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    let symbol_filter_maxTrailingAboveDelta = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    let symbol_filter_minTrailingBelowDelta = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    let symbol_filter_maxTrailingBelowDelta = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_minTrailingAboveDelta'] = symbol_filter_minTrailingAboveDelta;",
									"                    symbol_filter_obj['symbol_filter_maxTrailingAboveDelta'] = symbol_filter_maxTrailingAboveDelta;",
									"                    symbol_filter_obj['symbol_filter_minTrailingBelowDelta'] = symbol_filter_minTrailingBelowDelta;",
									"                    symbol_filter_obj['symbol_filter_maxTrailingBelowDelta'] = symbol_filter_maxTrailingBelowDelta;",
									"",
									"                    break;",
									"                }",
									"",
									"                case 14: {",
									"                    symbol_filter_obj[\"symbol_filter_filterType\"] = \"TPlusSell\";",
									"                    ",
									"                    let symbol_filter_endTime = parseInt(new DataView(buffer).getBigInt64(pointTo,true));",
									"                    pointTo += 8;",
									"                    ",
									"                    symbol_filter_obj['symbol_filter_endTime'] = symbol_filter_endTime;",
									"                    ",
									"                    break;",
									"                }",
									"            }",
									"",
									"            symbol_filters.push(symbol_filter_obj);",
									"",
									"        }",
									"",
									"        symbol_obj[\"symbol_filters\"] = symbol_filters;",
									"",
									"        let group_permissions_blockLength = new DataView(buffer).getUint16(pointTo,true);",
									"        pointTo += 2;",
									"        let group_permissions_numInGroup = new DataView(buffer).getUint32(pointTo,true);",
									"        pointTo += 4;",
									"",
									"",
									"        symbol_obj['group_permissions_blockLength'] = group_permissions_blockLength;",
									"        symbol_obj['group_permissions_numInGroup'] = group_permissions_numInGroup;",
									"",
									"        let symbol_permissions = [];",
									"        for(let j=0;j<group_permissions_numInGroup;j++){",
									"            let symbol_permission_obj={}",
									"            let symbol_permission_data_length = new DataView(buffer).getUint8(pointTo,true);",
									"            pointTo += 1;",
									"            ",
									"            let symbol_permission_varData = Uint8ArrayToString(temp_buffer.slice(pointTo,pointTo+symbol_permission_data_length));",
									"            pointTo += symbol_permission_data_length",
									"",
									"            symbol_permission_obj = {",
									"                \"symbol_permission_data_length\": symbol_permission_data_length,",
									"                \"symbol_permission_varData\": symbol_permission_varData",
									"            }",
									"",
									"            symbol_permissions.push(symbol_permission_obj);",
									"        }",
									"        symbol_obj['symbol_permissions'] = symbol_permissions;",
									"",
									"",
									"",
									"        let symbol_name_obj = {};",
									"        let symbol_name_data_length = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"",
									"        let symbol_name_varData = Uint8ArrayToString(temp_buffer.slice(pointTo,pointTo+symbol_name_data_length));",
									"        pointTo += symbol_name_data_length",
									"        ",
									"",
									"        symbol_name_obj = {",
									"            \"symbol_name_data_length\": symbol_name_data_length,",
									"            \"symbol_name_varData\": symbol_name_varData",
									"        }",
									"",
									"        symbol_obj['symbol_name_obj'] = symbol_name_obj;",
									"",
									"        let symbol_baseAsset_obj = {};",
									"        let symbol_baseAsset_data_length = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"",
									"        let symbol_baseAsset_varData = Uint8ArrayToString(temp_buffer.slice(pointTo,pointTo+symbol_baseAsset_data_length));",
									"        pointTo += symbol_baseAsset_data_length;",
									"",
									"        symbol_baseAsset_obj = {",
									"            \"symbol_baseAsset_data_length\": symbol_baseAsset_data_length,",
									"            \"symbol_baseAsset_varData\": symbol_baseAsset_varData",
									"        }",
									"",
									"        symbol_obj['symbol_baseAsset_obj'] = symbol_baseAsset_obj;",
									"",
									"",
									"        let symbol_quoteAsset_obj = {};",
									"        let symbol_quoteAsset_data_length = new DataView(buffer).getUint8(pointTo,true);",
									"        pointTo += 1;",
									"",
									"        let symbol_quoteAsset_varData = Uint8ArrayToString(temp_buffer.slice(pointTo,pointTo+symbol_quoteAsset_data_length));",
									"        pointTo += symbol_quoteAsset_data_length;",
									"        ",
									"        symbol_quoteAsset_obj = {",
									"            \"symbol_quoteAsset_data_length\": symbol_quoteAsset_data_length,",
									"            \"symbol_quoteAsset_varData\": symbol_quoteAsset_varData",
									"        }",
									"",
									"        symbol_obj['symbol_quoteAsset_obj'] = symbol_quoteAsset_obj;",
									"",
									"        symbols.push(symbol_obj);",
									"    }",
									"    ",
									"    result[\"symbols\"] = symbols;",
									"}",
									"else if(templateId === 100){",
									"",
									"}",
									"",
									"",
									"let hexString = arrayBufferToHexString(buffer);",
									"let display = {",
									"    \"hexString\": hexString,",
									"    \"detail\": JSON.stringify(result)",
									"}",
									"",
									"console.log(display)",
									"// pm.visualizer.set(display)",
									"let template = \"<html><body>hex: {{response.hexString}}</br>{{response.detail}}</body></html>\"",
									"pm.visualizer.set(template,{response: display})",
									"",
									"",
									"",
									"function arrayBufferToHexString(buffer) {",
									"  const byteArray = new Uint8Array(buffer);",
									"  const hexString = [];",
									"  for (let i = 0; i < byteArray.byteLength; i++) {",
									"    hexString.push(byteArray[i].toString(16));",
									"  }",
									"  return hexString.join('');",
									"}",
									"",
									"",
									"function Uint8ArrayToString(fileData){",
									"  var dataString = \"\";",
									"  for (var i = 0; i < fileData.length; i++) {",
									"    dataString += String.fromCharCode(fileData[i]);",
									"  }",
									" ",
									"  return dataString",
									"}",
									"",
									"",
									"function MantissaToString(mantissa,exponent){",
									"    let mantissa_str = mantissa.toString();",
									"    let data_str = ''",
									"    if(exponent<0){",
									"        if(Math.abs(exponent)<mantissa_str.length){",
									"            data_str = mantissa_str.slice(0,exponent) + '.' + mantissa_str.slice(exponent);",
									"        }",
									"        else{",
									"            data_str = '0.' + '0'.repeat(Math.abs(mantissa_str.length + exponent)) + mantissa_str;",
									"        }",
									"    }",
									"    else{",
									"        data_str = mantissa_str + '0'.repeat(exponent);",
									"    }",
									"    return data_str;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/sbe",
								"type": "text"
							},
							{
								"key": "X-MBX-SBE",
								"value": "1:0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v3/exchangeInfo",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"exchangeInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const ts  = Date.now();",
					"pm.environment.set(\"timestamp\", ts);",
					"",
					"let paramsObject = {};",
					"",
					"const binance_api_secret = pm.environment.get(\"binance-api-secret\");",
					"",
					"const parameters = pm.request.url.query;",
					"",
					"parameters.map((param) => {",
					"    if (param.key != 'signature' && ",
					"        !is_empty(param.value) &&",
					"        !is_disabled(param.disabled)) {",
					"            paramsObject[param.key] = param.value;",
					"            //console.log(encodeURIComponent(param.value));",
					"            //pm.environment.set(param.key, encodeURIComponent(param.value));",
					"    }",
					"})",
					"        ",
					"Object.assign(paramsObject, {'timestamp': ts});",
					"",
					"if (binance_api_secret) {",
					"    const queryString = Object.keys(paramsObject).map((key) => {",
					"        return `${key}=${paramsObject[key]}`;",
					"    }).join('&');",
					"    console.log(queryString);",
					"    const signature = CryptoJS.HmacSHA256(queryString, binance_api_secret).toString();",
					"    pm.environment.set(\"signature\", signature);",
					"}",
					"",
					"",
					"function is_disabled(str) {",
					"    return str == true;",
					"}",
					"",
					"function is_empty(str) {",
					"    if (typeof str == 'undefined' ||",
					"        !str || ",
					"        str.length === 0 || ",
					"        str === \"\" ||",
					"        !/[^\\s]/.test(str) ||",
					"        /^\\s*$/.test(str) ||",
					"        str.replace(/\\s/g,\"\") === \"\")",
					"    {",
					"        return true;",
					"    }",
					"    else",
					"    {",
					"        return false;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
